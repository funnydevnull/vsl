package vsl.core;

import java.util.Vector;

import vsl.core.types.vslID;

/**
 * This class represents a new version of some data-type generated by a VSL
 * handler with its own type of vslChunk C.
 *
 * Handlers are responsible for taking some external data type and chunking it.
 * They then generate an instance of a vslDataType (or a subclass) which
 * includes the name of the previous version (or null) as well as the relevant
 * old and new chunks.
 */
public class vslDataType<C extends vslChunk> {
	
	String name;
	Vector<vslID> prevIDs = null;
	Vector<C> newChunks = new Vector<C>();
	Vector<C> oldChunks = new Vector<C>();

	public String getName()
	{
		return name;		
	}

	public void setName(String name) 
	{
		this.name = name;
	}
		
	public void setPrevVersions(Vector<vslID> prevIDs)
	{
		this.prevIDs = prevIDs;
	}

	public Vector<vslID> prevVersions()
	{
		return prevIDs;
	}

	public Vector<C> getNewChunks()
	{
		return newChunks;
	}
		
	public Vector<C> getOldChunks()
	{
		return oldChunks;
	}

	public void addNewChunk(C chunk) {
		newChunks.add(chunk);
	}

	public void addOldChunk(C chunk) {
		oldChunks.add(chunk);
	}

}
